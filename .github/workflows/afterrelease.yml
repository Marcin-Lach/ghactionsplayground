name: After release package

on: 
  workflow_dispatch:
    inputs:
      release_name:
        description: Tag of Github release that you want to trigger this workflow for
        required: true
  release:
    types: [prereleased]

jobs:
  setReleaseVersion:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.setOutput.outputs.tag }}
    steps:
      - name: tag_from_release
        if: github.event.release
        run: echo "release_tag=${{github.event.release.tag_name}}" >> $GITHUB_ENV
      - name: tag_from_workflow_dispatch
        if: github.event.inputs
        run: echo "release_tag=${{github.event.inputs.release_name}}" >> $GITHUB_ENV
      - name: set_output
        id: setOutput
        run: echo "::set-output name=tag::${{ env.release_tag }}"

  # build:
  #   runs-on: ubuntu-latest
  #   needs: setReleaseVersion
  #   steps:
  #     - name: Dump GitHub context
  #       env:
  #         GITHUB_CONTEXT: ${{ toJson(github) }}
  #       run: echo "$GITHUB_CONTEXT"

  tests:
    needs: setReleaseVersion
    runs-on: ubuntu-latest
    env:
      release_tag: ${{ needs.setReleaseVersion.outputs.tag }}

    strategy: 
      matrix:
        customer: ["John", "Elie", "Doug", "Zoe"]
        include:
          - customer: "John"
            configuration: {
              version: "3.12",
              repo: "repo/John",
              branch: $develop_branch
            }
          - customer: "Elie"
            configuration: {
              version: "3.11",
              repo: "repo/Elie",
              branch: "release/1.23"
            }
          - customer: "Doug"
            configuration: {
              version: "3.9",
              repo: "repo/Doug",
              branch: $develop_branch
            }
          - customer: "Zoe"
            configuration: {
              version: "3.11",
              repo: "repo/Zoe",
              branch: "main"
            }

    steps:
      - name: show release version
        run: echo "release ${{ env.release_tag }}"

      - name: Released ${{env.release_tag}}
        if: ${{ startsWith(env.release_tag, matrix.configuration.version) }}
        run: echo "release ${{env.release_tag}} for ${{matrix.customer}} on repo ${{matrix.configuration.repo}} branch ${{matrix.configuration.branch}} - params ${{ env.release_tag }}"

  addSummaryToRelease:
    needs: [tests, setReleaseVersion]
    runs-on: ubuntu-latest
    env:
      release_tag: ${{ needs.setReleaseVersion.outputs.tag }}

    steps:
      - name: Create summary filename
        run: echo "summary" >> summary.txt
      - name: Append results to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.release_tag }}
          files: summary.txt
          token: ${{secrets.PAT}}
      - name: Publish release # add check if all tests were executed successfully
        uses: softprops/action-gh-release@v1
        with:
          prerelease: false
          tag_name: ${{ env.release_tag }}
          token: ${{secrets.PAT}}

