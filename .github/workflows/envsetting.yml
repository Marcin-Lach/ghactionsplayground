name: Logic while setting env var based on input params

on:
  schedule:
    - cron: '5,10,15,20,25,30,35,40,45,50,55 * * * 2,3' # Tuesday, every minute
  workflow_dispatch:
    inputs:
      db-size:
        description: pick a number
        required: true
        type: choice
        default: "1"
        options:
          - "1"
          - "5"
          - "another"
      another-text:
        description: another number
        required: false
        default: ""
      condition-for-job:
        required: true
        default: false
env:
  DB_SIZE_ENV: ${{ github.event.inputs.db-size == 'another' && github.event.inputs.another-text || github.event.inputs.db-size || '6' }}

jobs:
  align-inputs:
    runs-on: ubuntu-latest
    outputs: 
      db-size: ${{ steps.fix.outputs.db-size }}
      another-text: ${{ steps.fix.outputs.another-text }}
      condition-for-job: ${{ steps.fix.outputs.condition-for-job }}
    steps:
      - name: print-event_name
        shell: pwsh
        run: 
          echo ${{ github.event_name }}

      - name: fix
        id: fix
        shell: pwsh
        run: |
          if ("${{ github.event_name }}" -eq "schedule") 
          {
            echo "setting output for scheduled event"

            echo "db-size=7"                >> "$env:GITHUB_OUTPUT"
            echo "another-text=schedule"    >> "$env:GITHUB_OUTPUT"
            echo "condition-for-job=true"   >> "$env:GITHUB_OUTPUT"
          } else {
            echo "setting output for workflow_dispatch event"

            echo "db-size=${{ inputs.db-size }}"                      >> "$env:GITHUB_OUTPUT"
            echo "another-text=${{ inputs.another-text }}"            >> "$env:GITHUB_OUTPUT"
            echo "condition-for-job=${{ inputs.condition-for-job }}"  >> "$env:GITHUB_OUTPUT"
          }
          echo $env:GITHUB_OUTPUT

  display-env:
    runs-on: ubuntu-latest
    needs: [align-inputs]
    steps:
      - name: display
        shell: pwsh
        run: |
            echo "Db-size is ${{ needs.align-inputs.outputs.db-size }}"                 >> $env:GITHUB_STEP_SUMMARY
            echo "Another text is ${{ needs.align-inputs.outputs.another-text }}"       >> $env:GITHUB_STEP_SUMMARY
            echo "Job condition is ${{ needs.align-inputs.outputs.condition-for-job }}" >> $env:GITHUB_STEP_SUMMARY
          
          
      - name: print-inputs
        shell: pwsh
        env:
          INPUTS: ${{ toJSON(inputs) }}
        run: |
           "Running on branch: ``$env:GITHUB_REF``" >> $env:GITHUB_STEP_SUMMARY
            "Name|Value" >> $env:GITHUB_STEP_SUMMARY
            "---|---" >> $env:GITHUB_STEP_SUMMARY

            $inputs = $env:INPUTS | ConvertFrom-Json
            $inputs | Get-Member -MemberType NoteProperty | ForEach-Object {
              $value = $inputs.($_.Name)
              $mdValue = if ($null -eq $value -or ($value -is [string] -and -not $value)) { '_empty_' } else { "``$value``" }
              "$($_.Name)|$mdValue" >> $env:GITHUB_STEP_SUMMARY
            }

  conditional-job:
    needs: [align-inputs]
    if: needs.align-inputs.outputs.condition-for-job == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: print
        shell: pwsh
        run: |
          echo "false printing" >> $env:GITHUB_STEP_SUMMARY

  conditional-job2:
    needs: [align-inputs]
    if: needs.align-inputs.outputs.condition-for-job == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: print
        shell: pwsh
        run: |
          echo "true printing" >> $env:GITHUB_STEP_SUMMARY

